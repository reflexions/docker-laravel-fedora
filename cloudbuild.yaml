# used https://github.com/GoogleCloudPlatform/solutions-build-multi-architecture-images-tutorial/blob/master/terraform/cloud-build/build-docker-image-trigger.yaml
# as a guide for the multiarch setup
# (from https://github.com/GoogleCloudPlatform/solutions-build-multi-architecture-images-tutorial)


steps:
  - id: 'docker from registry version'
    name: 'docker'
    args: [ '--version' ]

  - id: 'built docker version'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', '--version' ]

  - id: 'initialize-qemu'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'run', '--privileged', 'linuxkit/binfmt:v0.8' ]

  - id: 'create-builder'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'buildx', 'create', '--name', 'mybuilder' ]

  - id: 'select-builder'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'buildx', 'use', 'mybuilder' ]

  - id: 'show-target-build-platforms'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'buildx', 'inspect', '--bootstrap' ]

  - id: 'build-and-push'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    entrypoint: bash
    args:
      - -c
      - |
        # replace "." with "-"
        php_version_for_image=$(echo "${_PHP_VERSION}" | sed "s/\./-/")
        
        target=php-base
        image_suffix=php-${php_version_for_image}
        
        if [[ "$_NODE_MAJOR_VERSION" != "" ]]; then
          image_suffix="${image_suffix}-node-${_NODE_MAJOR_VERSION}"
          target=with-node
        fi
        
        if [[ "$_WITH_GCLOUD" == "1" ]]; then
          image_suffix="${image_suffix}-gcloud"
          target=with-gcloud
        fi
        
        if [[ "$_SQUASHED" == "1" ]]; then
          image_suffix="${image_suffix}-squashed"
          target="${target}"-squashed
        fi
        
        echo "php: ${_PHP_VERSION}"
        echo "node: ${_NODE_MAJOR_VERSION}"
        echo "gcloud: ${_WITH_GCLOUD}"
        echo "squashed: ${_SQUASHED}"
        echo "target: ${target}"
        
        # https://docs.docker.com/engine/reference/commandline/buildx_build/
        
        #--output=type=docker
        # exports the built image to the local docker cache
        # but with multiarch build: "docker exporter does not currently support exporting manifest lists"
        # since output type=docker doesn't work, we have to --push
        
        # remi only supports arm64 platform for centos >= 9
        
        # us-central1-docker.pkg.dev is artifact registry
        
        set -x #echo on
        
        docker buildx build \
          --push \
          --platform "$_PLATFORMS" \
          --file "Dockerfile-${_OS}" \
          --target "$target" \
          --build-arg PHP_VERSION=${_PHP_VERSION} \
          --build-arg NODE_MAJOR_VERSION=${_NODE_MAJOR_VERSION} \
          --tag us-central1-docker.pkg.dev/$PROJECT_ID/reflexions-laravel-base-us-central1/${_OS}/${image_suffix}:${BRANCH_NAME} \
          --tag us-central1-docker.pkg.dev/$PROJECT_ID/reflexions-laravel-base-us-central1/${_OS}/${image_suffix}:${COMMIT_SHA} \
          .

options:
  # https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#machinetype
  # unspecified, N1_HIGHCPU_8, N1_HIGHCPU_32, E2_HIGHCPU_8, E2_HIGHCPU_32
  machineType: 'E2_HIGHCPU_32'
timeout: 2400s

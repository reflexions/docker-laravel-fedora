# used https://github.com/GoogleCloudPlatform/solutions-build-multi-architecture-images-tutorial/blob/master/terraform/cloud-build/build-docker-image-trigger.yaml
# as a guide for the multiarch setup
# (from https://github.com/GoogleCloudPlatform/solutions-build-multi-architecture-images-tutorial)


steps:
  - id: 'docker from registry version'
    name: 'docker'
    args: [ '--version' ]

  - id: 'built docker version'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', '--version' ]

  - id: 'artifact registry auth'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'gcloud', '--quiet', 'auth', 'configure-docker', 'us-central1-docker.pkg.dev' ]

  - id: 'initialize-qemu'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'run', '--privileged', 'linuxkit/binfmt:v1.0.0' ]

  - id: 'create-builder'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'buildx', 'create', '--name', 'mybuilder' ]

  - id: 'select-builder'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'buildx', 'use', 'mybuilder' ]

  - id: 'show-target-build-platforms'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    args: [ 'docker', 'buildx', 'inspect', '--bootstrap' ]

  - id: 'build-and-push'
    name: 'us-central1-docker.pkg.dev/docker-with-gcloud-395321/docker-with-gcloud/docker-with-gcloud:latest'
    entrypoint: bash
    args:
      - -c
      - |
        # replace "." with "-"
        php_version_for_image=$(echo "${_PHP_VERSION}" | sed "s/\./-/")
        
        php_module=${PHP_MODULE-php:remi-${_PHP_VERSION}}
        if [ "${_OS}" == "centos-7" ]; then
          # replace "." with ""
          php_version_for_module=$(echo "${_PHP_VERSION}" | sed "s/\.//")
          
          php_module=${PHP_MODULE-php:remi-php${php_version_for_module}}
        fi
        
        target=php-base
        image_suffix=php-${php_version_for_image}
        
        if [[ "$_NODE_MAJOR_VERSION" != "" ]]; then
          image_suffix="${image_suffix}-node-${_NODE_MAJOR_VERSION}"
          target=with-node
        fi
        
        if [[ "$_WITH_GCLOUD" == "1" ]]; then
          image_suffix="${image_suffix}-gcloud"
          target=with-gcloud
        fi
        
        if [[ "$_SQUASHED" == "1" ]]; then
          image_suffix="${image_suffix}-squashed"
          target="${target}"-squashed
        fi
        
        # show-target-build-platforms during the build shows what the centos image supports
        # to see what is available regardless of what centos supports:
        # docker build --platform linux/amd64/10 --file Dockerfile-list-targets .
        # ERROR: failed to solve: no support for running processes with linux/amd64/10 platform, supported: linux/amd64, linux/amd64/v2, linux/amd64/v3
        #
        # cloudbuild var substitution doesn't know the bash syntax with default, (${SOMEVAR-defaultval}) so instead use if
        # centos image manifests don't specify a specific microarchitecture even though the embedded glibc binaries do
        # centos 9 is compatible with linux/amd64/v2, but centos 10 requires linux/amd64/v3+
        if [[ "${_PLATFORMS}" == "" ]]; then
          if [ "${_OS}" == "rockylinux-9" ]; then
            # doesn't support arm64
            platform="linux/amd64"
          elif [ "${_OS}" == "centos-8" -o "${_OS}" == "centos-9" ]; then
            platform="linux/amd64,linux/amd64/v2,linux/arm64"
          else
            # linux/amd64/v3,
            platform="linux/amd64,linux/arm64"
          fi
        else
          platform=${_PLATFORMS}
        fi
        
        echo "platform: ${platform}"
        echo "os: ${_OS}"
        echo "target: ${target}"
        echo "php: ${_PHP_VERSION}"
        echo "php module: ${php_module}"
        echo "node: ${_NODE_MAJOR_VERSION}"
        echo "gcloud: ${_WITH_GCLOUD}"
        echo "squashed: ${_SQUASHED}"
        echo "target: ${target}"
        
        # https://docs.docker.com/engine/reference/commandline/buildx_build/
        
        #--output=type=docker
        # exports the built image to the local docker cache
        # but with multiarch build: "docker exporter does not currently support exporting manifest lists"
        # since output type=docker doesn't work, we have to --push
        
        # remi only supports arm64 platform for centos >= 8
        
        # us-central1-docker.pkg.dev is artifact registry
        
        set -x #echo on
        
        docker_tag="$BRANCH_NAME"
        if [ "$BRANCH_NAME" == "main" ]; then
          docker_tag=latest
        fi
        
        registry_base=us-central1-docker.pkg.dev/$PROJECT_ID/reflexions-laravel-base-us-central1
        
        exec docker buildx build \
          --progress plain \
          --push \
          --platform "${platform}" \
          --file "Dockerfile-${_OS}" \
          --target "$target" \
          \
          --build-arg BUILD_DATE="$(date --iso-8601=seconds --utc)" \
          --build-arg GIT_COMMIT_HASH=${COMMIT_SHA} \
          --build-arg GIT_BRANCH=${BRANCH_NAME} \
          --build-arg PHP_VERSION=${_PHP_VERSION} \
          --build-arg PHP_MODULE=${php_module} \
          --build-arg NODE_MAJOR_VERSION=${_NODE_MAJOR_VERSION} \
          \
          --tag ${registry_base}/${_OS}/${image_suffix}:${docker_tag} \
          --tag ${registry_base}/${_OS}/${image_suffix}:${COMMIT_SHA} \
          .

options:
  # https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#machinetype
  # unspecified, N1_HIGHCPU_8, N1_HIGHCPU_32, E2_HIGHCPU_8, E2_HIGHCPU_32
  #machineType: 'E2_HIGHCPU_8'

  pool:
    # the centos-10 +node +gcloud build takes > 1 hour on e2-highmem-4
    name: 'projects/reflexions-cubic/locations/us-central1/workerPools/e2-highmem-8'

# https://cloud.google.com/build/docs/build-config-file-schema#timeout_2
# 1 hour is the max allowed, and the default
#timeout: 3600s

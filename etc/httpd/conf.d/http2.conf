# it you want to serve http2, enable this:
# Protocols h2 h2c http/1.1

# More info: https://httpd.apache.org/docs/2.4/howto/http2.html
#
# if the incoming connection is using https, this will let us speak http/2 with the client. So far so good.
# things get interesting if there's a reverse proxy between us and the client.
# If the incoming connection from the proxy is an insecure http connection, we send an Upgrade header to advertise that
# we can also speak h2 (http/2 over https) or h2c (http/2 over tcp)
# That's a problem if we're behind a reverse proxy that doesn't recognize it, because that Upgrade header
# will be passed through the proxy to the client, who then thinks that that means that either they can upgrade their
# non-http2 connection with the proxy to http2 (though the proxy might not support it) or will break safari (desktop &
# mobile) if the connection is already http2.
# see also "H2Upgrade off" and "Header unset"

# "Header unset Upgrade" and "Header unset Connection" do remove both headers, but that seems a bit hacky

# H2Upgrade off doesn't seem to control whether the header is sent when used either here or in the vhost.
# I still get both headers:
# Upgrade: h2,h2c
# Connection: Upgrade

# we'll assume that we're running behind a reverse proxy, because we're usually using Cloudflare, an ELB, or nginx
# if you do want http2 enabled, write "Protocols h2 h2c http/1.1" to a file in /etc/httpd/conf.d/
# in your project's Dockerfile
